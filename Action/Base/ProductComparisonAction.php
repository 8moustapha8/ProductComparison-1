<?php
/**
* This class has been generated by TheliaStudio
* For more information, see https://github.com/thelia-modules/TheliaStudio
*/

namespace ProductComparison\Action\Base;

use ProductComparison\Model\Map\ProductComparisonTableMap;
use ProductComparison\Event\ProductComparisonEvent;
use ProductComparison\Event\ProductComparisonEvents;
use ProductComparison\Model\ProductComparisonQuery;
use ProductComparison\Model\ProductComparison;
use Thelia\Action\BaseAction;
use Thelia\Core\Event\ToggleVisibilityEvent;
use Thelia\Core\Event\UpdatePositionEvent;
use Propel\Runtime\Propel;
use Symfony\Component\EventDispatcher\EventSubscriberInterface;
use Thelia\Core\Event\TheliaEvents;
use \Thelia\Core\Event\TheliaFormEvent;
use Propel\Runtime\ActiveQuery\ModelCriteria;



trait PositionManagementTrait_ProductComparison{
    /**
     * Changes object position
     *
     * @param newPosition
     */
    public function changeAbsolutePosition($newPosition)
    {
        // The current position
        $current_position = $this->getPosition();

        if ($newPosition != null && $newPosition > 0 && $newPosition != $current_position) {
            // Find categories to offset
            $search = $this->createQuery();

            $this->addCriteriaToPositionQuery($search);

            if ($newPosition > $current_position) {
                // The new position is after the current position -> we will offset + 1 all categories located between us and the new position
                $search->filterByPosition(array('min' => 1+$current_position, 'max' => $newPosition));

                $delta = -1;
            } else {
                // The new position is brefore the current position -> we will offset - 1 all categories located between us and the new position
                $search->filterByPosition(array('min' => $newPosition, 'max' => $current_position - 1));

                $delta = 1;
            }

            $results = $search->find();

            $cnx = Propel::getWriteConnection($this->getDatabaseName());

            $cnx->beginTransaction();

            try {
                foreach ($results as $result) {
                    $objNewPosition = $result->getPosition() + $delta;

                    $result->setDispatcher($this->getDispatcher())->setPosition($objNewPosition)->save($cnx);
                }

                $this
                    ->setPosition($newPosition)
                    ->save($cnx)
                ;

                $cnx->commit();
            } catch (\Exception $e) {
                $cnx->rollback();
            }
        }
    }
}



/**
 * Class ProductComparisonAction
 * @package ProductComparison\Action
 * @author TheliaStudio
 */
class ProductComparisonAction extends BaseAction implements EventSubscriberInterface
{
    use PositionManagementTrait_ProductComparison;

    public function create(ProductComparisonEvent $event)
    {
        $this->createOrUpdate($event, new ProductComparison());
    }

    public function update(ProductComparisonEvent $event)
    {
        $model = $this->getProductComparison($event);

        $this->createOrUpdate($event, $model);
    }

    public function delete(ProductComparisonEvent $event)
    {
        $this->getProductComparison($event)->delete();
    }

    protected function createOrUpdate(ProductComparisonEvent $event, ProductComparison $model)
    {
        $con = Propel::getConnection(ProductComparisonTableMap::DATABASE_NAME);
        $con->beginTransaction();

        try {
            if (null !== $id = $event->getId()) {
                $model->setId($id);
            }

            if (null !== $featureId = $event->getFeatureId()) {
                $model->setFeatureId($featureId);
            }

            if (null !== $templateId = $event->getTemplateId()) {
                $model->setTemplateId($templateId);
            }

            if (null !== $position = $event->getPosition()) {
                $model->setPosition($position);
            }

            $model->save($con);

            $con->commit();
        } catch (\Exception $e) {
            $con->rollback();

            throw $e;
        }

        $event->setProductComparison($model);
    }

    protected function getProductComparison(ProductComparisonEvent $event)
    {
        $model = ProductComparisonQuery::create()->findPk($event->getId());

        if (null === $model) {
            throw new \RuntimeException(sprintf(
                "The 'product_comparison' id '%d' doesn't exist",
                $event->getId()
            ));
        }

        return $model;
    }

    public function updatePosition(UpdatePositionEvent $event)
    {
        $this->genericUpdatePosition(new ProductComparisonQuery(), $event);
    }

    /**
     * Changes object position, selecting absolute ou relative change.
     *
     * @param ModelCriteria       $query
     * @param UpdatePositionEvent $event
     *
     * @return null
     */
    protected function genericUpdatePosition(ModelCriteria $query, UpdatePositionEvent $event)
    {
        if (null !== $object = $query->findPk($event->getObjectId())) {
            $object->setDispatcher($event->getDispatcher());

            $mode = $event->getMode();

            if ($mode == UpdatePositionEvent::POSITION_ABSOLUTE) {
                $object->changeAbsolutePosition($event->getPosition());
            } elseif ($mode == UpdatePositionEvent::POSITION_UP) {
                $object->movePositionUp();
            } elseif ($mode == UpdatePositionEvent::POSITION_DOWN) {
                $object->movePositionDown();
            }
        }
    }

    public function beforeCreateFormBuild(TheliaFormEvent $event)
    {
    }

    public function beforeUpdateFormBuild(TheliaFormEvent $event)
    {
    }

    public function afterCreateFormBuild(TheliaFormEvent $event)
    {
    }

    public function afterUpdateFormBuild(TheliaFormEvent $event)
    {
    }

    /**
     * Returns an array of event names this subscriber wants to listen to.
     *
     * The array keys are event names and the value can be:
     *
     *  * The method name to call (priority defaults to 0)
     *  * An array composed of the method name to call and the priority
     *  * An array of arrays composed of the method names to call and respective
     *    priorities, or 0 if unset
     *
     * For instance:
     *
     *  * array('eventName' => 'methodName')
     *  * array('eventName' => array('methodName', $priority))
     *  * array('eventName' => array(array('methodName1', $priority), array('methodName2'))
     *
     * @return array The event names to listen to
     *
     * @api
     */
    public static function getSubscribedEvents()
    {
        return array(
            ProductComparisonEvents::CREATE => array("create", 128),
            ProductComparisonEvents::UPDATE => array("update", 128),
            ProductComparisonEvents::DELETE => array("delete", 128),
            ProductComparisonEvents::UPDATE_POSITION => array("updatePosition", 128),
            TheliaEvents::FORM_BEFORE_BUILD . ".product_comparison_create" => array("beforeCreateFormBuild", 128),
            TheliaEvents::FORM_BEFORE_BUILD . ".product_comparison_update" => array("beforeUpdateFormBuild", 128),
            TheliaEvents::FORM_AFTER_BUILD . ".product_comparison_create" => array("afterCreateFormBuild", 128),
            TheliaEvents::FORM_AFTER_BUILD . ".product_comparison_update" => array("afterUpdateFormBuild", 128),
        );
    }
}
